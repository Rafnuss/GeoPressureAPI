#!/usr/bin/python3
import math
import cgi
form = cgi.FieldStorage()
import json
import datetime
import os

timeStamp=math.floor(datetime.datetime.utcnow().timestamp());
with open("logs/{}.log".format(timeStamp), 'w') as f:
	data={};
	for key in list(form.keys()):
		data[key]=form.getvalue(key);
	f.write(json.JSONEncoder().encode(data))

def printErrorMessage(task_id,errorMessage,adviceMessage='Double check the inputs'):
#	import cgitb; cgitb.enable()
#	print('Status: 403 Forbidden\n')
	print("Content-type: application/json\n")
	print(json.JSONEncoder().encode({'status':'error','taskID':task_id,'errorMesage':errorMessage,'advice':adviceMessage}))
	exit()


if 'W' not in form or 'S' not in form or 'E' not in form or 'N' not in form :
	printErrorMessage(timeStamp,'W,S,E or N is missing the bounding box is mendatory!')

if('time' not in form or 'pressure' not in form or 'label' not in form):
	printErrorMessage(timeStamp,'time, pressure and label are mendatory!')

try:
	W=float(form.getvalue("W"));
except:
	printErrorMessage(timeStamp,'W is not a float number');

try:
	S=float(form.getvalue("S"));
except:
	printErrorMessage(timeStamp,'S is not a float number');

try:
	E=float(form.getvalue("E"));
except:
	printErrorMessage(timeStamp,'E is not a float number');

try:
	N=float(form.getvalue("N"));
except:
	printErrorMessage(timeStamp,'N is not a float number');

scale=10;
if 'scale' in form:
	try:
		scale=float(form.getvalue("scale"));
	except:
		printErrorMessage(timeStamp,'scale should be a number');

maxSample=250;
if 'maxSample' in form:
	try:
		maxSample=int(form.getvalue("maxSample"));
	except:
		printErrorMessage(timeStamp,'maxSample should be a number');

margin=30;
if 'margin' in form:
	try:
	  margin=float(form.getvalue("margin"));
	except:
	  printErrorMessage(timeStamp,'margin is not a float number');

mode='full;'
if 'mode' in form:
	mode=form.getvalue("mode");

sizeLon=(E-W)*scale;
sizeLat=(N-S)*scale;

if sizeLon!=math.floor(sizeLon):
	printErrorMessage(timeStamp,'(E-W)*scale should be an integer');

if sizeLat!=math.floor(sizeLat):
	printErrorMessage(timeStamp,'(N-S)*scale should be an integer');


time=json.JSONDecoder().decode(form.getvalue("time"));
pressure=json.JSONDecoder().decode(form.getvalue("pressure"));
label=json.JSONDecoder().decode(form.getvalue("label"));

if(len(time)!=len(pressure) or len(time)!=len(label)):
	printErrorMessage(timeStamp,'presure time and label need to have the same length!');

# mode = full, recued, anything else
# full: do not mask error map
# redcued: mask and export only the errormap
def getMSE_Map(time, pressure, label, W, S, E, N, sclaeFcator=10, mode='full',maxSample=250,margin=30):
	import ee
	service_account = os.environ['GEE_API_ADDRESS'];
	credentials = ee.ServiceAccountCredentials(service_account, '../gee-api-key.json')
	ee.Initialize(credentials)
	def makeFeature(li):
		li=ee.List(li);
		return ee.Feature(None,{'system:time_start':ee.Number(li.get(0)).multiply(1000),'pressure':li.get(1),'label':li.get(2)})
	
	val=ee.List([time, pressure, label]).unzip();
	fc=ee.FeatureCollection(val.map(makeFeature));

	def makeFeatureLabel(labelId):
		return ee.Feature(None,{'label':labelId});

	listLabel=fc.aggregate_array('label').distinct();

	def runMSEmatch(labelFeature):

		#standard temperature lapse rate [K/m] = -0.0065 [K/m]
		Lb = -0.0065;
		#universal gas constant = 8.31432 [N * m / mol /K]
		R = 8.31432;
		#gravitational acceleration constant = 9.80665 [m/s^2]
		g0 = 9.80665;
		#molar mass of Earth s air = 0.0289644 [kg/mol]
		M = 0.0289644;
		#standard temperature (temperature at sea level) [K]
		T0 = 273.15+15;

		labelFeature=labelFeature.randomColumn("random").sort("random").limit(maxSample);

		presureMeanSesnor=labelFeature.aggregate_mean('pressure');
		start=labelFeature.aggregate_min('system:time_start');
		end=labelFeature.aggregate_max('system:time_start');
		ERA5=ee.ImageCollection("ECMWF/ERA5_LAND/HOURLY");

		# ERA5_stat=ERA5.aggregate_stats('system:time_start');
		# if(ee.Number(start).lt(ERA5_stat.get('min')).Or(ee.Number(end).gt(ERA5_stat.get('max'))).getInfo()):
		# 	printErrorMessage(timeStamp,'Some requested times are not in the available ERA5 reanalysis.');

		ERA5_pressur=ERA5.filterDate(start,ee.Date(end).advance(1,'hour')).select(['surface_pressure','temperature_2m']);

		era5_llabelFeature=ee.Join.saveBest(matchKey='bestERA5',measureKey='diff').apply(labelFeature,ERA5_pressur,ee.Filter.maxDifference(3600*1000,leftField='system:time_start',  rightField='system:time_start' ));

		def getpresurMap(ft):
			return ee.Image(ft.get('bestERA5'));

		meanMapPressure=ee.ImageCollection(era5_llabelFeature.map(getpresurMap)).select('surface_pressure').mean();

		def getError(ft):
			error=ee.Image(ft.get('bestERA5')).select('surface_pressure').subtract(meanMapPressure).subtract(ee.Number(ft.get('pressure')).subtract(presureMeanSesnor)).toFloat();
			altIm=ee.Image('projects/earthimages4unil/PostDocProjects/rafnuss/min_max_elevation');
			dh = ee.Image(ft.get('bestERA5')).select('temperature_2m').divide(Lb).multiply(ee.Image.constant(ee.Number(ft.get('pressure'))).divide(ee.Image(ft.get('bestERA5')).select('surface_pressure')).pow(-R*Lb/g0/M).subtract(1));
			isPossible=dh.gte(altIm.select('elevation_min').add(-margin)).And(dh.lte(altIm.select('elevation_max').add(margin))).toFloat();
			return error.multiply(error).addBands(isPossible).rename(['error','isPossible']);

		agregatedMap=ee.ImageCollection(era5_llabelFeature.map(getError)).mean().updateMask(ERA5_pressur.first().mask())
		if 'full' not in mode:
			agregatedMap=agregatedMap.updateMask(agregatedMap.select('isPossible').gte(0.90)); # I hardcode 90% you can change if you want
		if 'redcued' in mode:
			agregatedMap=agregatedMap.select('error')

		#agregatedMap=agregatedMap.addBands(agregatedMap.mask());

		return agregatedMap.set('label',labelFeature.get('label'))

	#listLabel_py=listLabel.getInfo();
	listLabel_py=list(set(label));# maybe less robust, but clearly much faster
	urls={}

	for label in listLabel_py:
			urls[label]=runMSEmatch(fc.filter(ee.Filter.equals('label',label))).getDownloadURL({"name":'label',"dimensions":[(E-W)*sclaeFcator, (N-S)*sclaeFcator],"format":"GEO_TIFF", "region":ee.Algorithms.GeometryConstructors.BBox(W,S,E,N)});# ZIPPED_GEO_TIFF

	return {'format':'GEOTIFF',
			'labels':listLabel_py,
			'urls':[urls[label] for label in listLabel_py],
			'resolution':1/scale,
			'bbox':{'W':W,'S':S,'E':E,'N':N},
			'size':[sizeLon, sizeLat]
			}

try:
	dic = getMSE_Map(time, pressure, label,W,S,E,N, scale,mode,maxSample,margin);
	dic = {'status':'success', 'taskID':timeStamp,'data':dic};
	print("Content-type: application/json\n")
	print(json.JSONEncoder().encode(dic))
except Exception as e:
	printErrorMessage(timeStamp,str(e),"An error has occurred. Please try again, and if the problem persists, file an issue on https://github.com/Rafnuss/GeoPressureServer/issues/new?body=task_id:{}&labels=crash".format(timeStamp));

	
